{"version":3,"file":"index.mjs","sources":["../lib/ndarray.js","../lib/sasumpw.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32' ;\nimport floor from '@stdlib/math-base-special-floor' ;\nimport abs from '@stdlib/math-base-special-abs' ;\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of absolute values (L1 norm) of single-precision floating-point strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = sasumpw( N, x, 2, 1 );\n* // returns 9.0\n*/\nfunction sasumpw( N, x, stride, offset ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn abs( x[ offset ] );\n\t}\n\tix = offset;\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts = float64ToFloat32( s + abs( x[ ix ] ) );\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = abs( x[ ix ] );\n\t\ts1 = abs( x[ ix+stride ] );\n\t\ts2 = abs( x[ ix+(2*stride) ] );\n\t\ts3 = abs( x[ ix+(3*stride) ] );\n\t\ts4 = abs( x[ ix+(4*stride) ] );\n\t\ts5 = abs( x[ ix+(5*stride) ] );\n\t\ts6 = abs( x[ ix+(6*stride) ] );\n\t\ts7 = abs( x[ ix+(7*stride) ] );\n\t\tix += 8 * stride;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 = float64ToFloat32( s0 + abs( x[ ix ] ) );\n\t\t\ts1 = float64ToFloat32( s1 + abs( x[ ix+stride ] ) );\n\t\t\ts2 = float64ToFloat32( s2 + abs( x[ ix+(2*stride) ] ) );\n\t\t\ts3 = float64ToFloat32( s3 + abs( x[ ix+(3*stride) ] ) );\n\t\t\ts4 = float64ToFloat32( s4 + abs( x[ ix+(4*stride) ] ) );\n\t\t\ts5 = float64ToFloat32( s5 + abs( x[ ix+(5*stride) ] ) );\n\t\t\ts6 = float64ToFloat32( s6 + abs( x[ ix+(6*stride) ] ) );\n\t\t\ts7 = float64ToFloat32( s7 + abs( x[ ix+(7*stride) ] ) );\n\t\t\tix += 8 * stride;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = float64ToFloat32( float64ToFloat32( float64ToFloat32(s0+s1) + float64ToFloat32(s2+s3) ) + float64ToFloat32( float64ToFloat32(s4+s5) + float64ToFloat32(s6+s7) ) ); // eslint-disable-line max-len\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ts = float64ToFloat32( s + abs( x[ ix ] ) );\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn float64ToFloat32( sasumpw( n, x, stride, ix ) + sasumpw( N-n, x, stride, ix+(n*stride) ) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default sasumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32' ;\nimport abs from '@stdlib/math-base-special-abs' ;\nimport sum from './ndarray.js' ;\n\n\n// MAIN //\n\n/**\n* Computes the sum of absolute values (L1 norm) of single-precision floating-point strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} sum\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = sasumpw( N, x, 1 );\n* // returns 5.0\n*/\nfunction sasumpw( N, x, stride ) {\n\tvar ix;\n\tvar s;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn abs( x[ 0 ] );\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts = float64ToFloat32( s + abs( x[ ix ] ) );\n\t\t\tix += stride;\n\t\t}\n\t\treturn s;\n\t}\n\treturn sum( N, x, stride, ix );\n}\n\n\n// EXPORTS //\n\nexport default sasumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport sasumpw from './sasumpw.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( sasumpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default sasumpw;\n"],"names":["sasumpw","N","x","stride","offset","ix","s0","s1","s2","s3","s4","s5","s6","s7","M","s","n","i","abs","float64ToFloat32","floor","sum","setReadOnly","ndarray"],"mappings":";;uYA8DA,SAASA,EAASC,EAAGC,EAAGC,EAAQC,GAC/B,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKhB,GAAK,EACT,OAAO,EAER,GAAW,IAANA,GAAsB,IAAXE,EACf,OAAOe,EAAKhB,EAAGE,IAGhB,GADAC,EAAKD,EACAH,EAAI,EAAI,CAGZ,IADAc,EAAI,EACEE,EAAI,EAAGA,EAAIhB,EAAGgB,IACnBF,EAAII,EAAkBJ,EAAIG,EAAKhB,EAAGG,KAClCA,GAAMF,EAEP,OAAOY,EAER,GAAKd,GA/DU,IA+DO,CAarB,IAXAK,EAAKY,EAAKhB,EAAGG,IACbE,EAAKW,EAAKhB,EAAGG,EAAGF,IAChBK,EAAKU,EAAKhB,EAAGG,EAAI,EAAEF,IACnBM,EAAKS,EAAKhB,EAAGG,EAAI,EAAEF,IACnBO,EAAKQ,EAAKhB,EAAGG,EAAI,EAAEF,IACnBQ,EAAKO,EAAKhB,EAAGG,EAAI,EAAEF,IACnBS,EAAKM,EAAKhB,EAAGG,EAAI,EAAEF,IACnBU,EAAKK,EAAKhB,EAAGG,EAAI,EAAEF,IACnBE,GAAM,EAAIF,EAEVW,EAAIb,EAAI,EACFgB,EAAI,EAAGA,EAAIhB,EAAEa,EAAGG,GAAK,EAC1BX,EAAKa,EAAkBb,EAAKY,EAAKhB,EAAGG,KACpCE,EAAKY,EAAkBZ,EAAKW,EAAKhB,EAAGG,EAAGF,KACvCK,EAAKW,EAAkBX,EAAKU,EAAKhB,EAAGG,EAAI,EAAEF,KAC1CM,EAAKU,EAAkBV,EAAKS,EAAKhB,EAAGG,EAAI,EAAEF,KAC1CO,EAAKS,EAAkBT,EAAKQ,EAAKhB,EAAGG,EAAI,EAAEF,KAC1CQ,EAAKQ,EAAkBR,EAAKO,EAAKhB,EAAGG,EAAI,EAAEF,KAC1CS,EAAKO,EAAkBP,EAAKM,EAAKhB,EAAGG,EAAI,EAAEF,KAC1CU,EAAKM,EAAkBN,EAAKK,EAAKhB,EAAGG,EAAI,EAAEF,KAC1CE,GAAM,EAAIF,EAMX,IAHAY,EAAII,EAAkBA,EAAkBA,EAAiBb,EAAGC,GAAMY,EAAiBX,EAAGC,IAAQU,EAAkBA,EAAiBT,EAAGC,GAAMQ,EAAiBP,EAAGC,KAGrJI,EAAIhB,EAAGgB,IACfF,EAAII,EAAkBJ,EAAIG,EAAKhB,EAAGG,KAClCA,GAAMF,EAEP,OAAOY,EAKR,OAFAC,EAAII,EAAOnB,EAAE,GAENkB,EAAkBnB,EADzBgB,GAAKA,EAAI,EAC4Bd,EAAGC,EAAQE,GAAOL,EAASC,EAAEe,EAAGd,EAAGC,EAAQE,EAAIW,EAAEb,IC5EvF,SAASH,EAASC,EAAGC,EAAGC,GACvB,IAAIE,EACAU,EACAE,EAEJ,GAAKhB,GAAK,EACT,OAAO,EAER,GAAW,IAANA,GAAsB,IAAXE,EACf,OAAOe,EAAKhB,EAAG,IAOhB,GAJCG,EADIF,EAAS,GACP,EAAEF,GAAKE,EAER,EAEDF,EAAI,EAAI,CAGZ,IADAc,EAAI,EACEE,EAAI,EAAGA,EAAIhB,EAAGgB,IACnBF,EAAII,EAAkBJ,EAAIG,EAAKhB,EAAGG,KAClCA,GAAMF,EAEP,OAAOY,EAER,OAAOM,EAAKpB,EAAGC,EAAGC,EAAQE,GClD3BiB,EAAAtB,EAAA,UAAAuB"}